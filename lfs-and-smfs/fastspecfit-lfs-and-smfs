#!/usr/bin/env python
"""
Fit the [OII] electron density sample.

/global/u2/i/ioannis/code/desihub/fastspecfit-projects/lowmass-agn/fastspecfit-lowmass-agn --mp 32
/global/u2/i/ioannis/code/desihub/fastspecfit-projects/lowmass-agn/fastspecfit-lowmass-agn --mp 32 --makeqa

/global/u2/i/ioannis/code/desihub/fastspecfit-projects/lowmass-agn/fastspecfit-lowmass-agn --mp 32 --fastphot
/global/u2/i/ioannis/code/desihub/fastspecfit-projects/lowmass-agn/fastspecfit-lowmass-agn --mp 32 --fastphot --makeqa

/global/u2/i/ioannis/code/desihub/fastspecfit-projects/lowmass-agn/fastspecfit-lowmass-agn --makehtml

"""
import pdb # for debugging

import os, time, subprocess
import numpy as np
import fitsio
from glob import glob
from astropy.table import Table, Table, vstack

from desiutil.log import get_logger
log = get_logger()

def main():
    """Main wrapper on fastphot and fastspec.

    Currently only knows about SV1 observations.

    """
    import argparse    
    from fastspecfit.mpi import plan
    from fastspecfit.continuum import ContinuumFit
    from fastspecfit.emlines import EMLineFit
    from fastspecfit.io import DESISpectra, write_fastspecfit, read_fastspecfit
    from fastspecfit.fastspecfit import _fastspec_one, fastspec_one, _fastphot_one, fastphot_one, _desiqa_one, desiqa_one
    
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--mp', type=int, default=1, help='Number of multiprocessing processes per MPI rank or node.')
    parser.add_argument('--targetids', type=str, default=None, help='Comma-separated list of TARGETIDs to process.')
    parser.add_argument('--fastphot', action='store_true', help='Fit the broadband photometry.')
    parser.add_argument('--merge', action='store_true', help='Merge all individual catalogs into one large file.')
    parser.add_argument('--makeqa', action='store_true', help='Build QA in parallel.')
    parser.add_argument('--makehtml', action='store_true', help='Build the HTML page.')

    args = parser.parse_args()

    def fit_survey(sample, survey='main', outfile=None, fastphot=False):
        """Wrapper so we can fit fuji separately from guadalupe"""

        if survey == 'main':
            specprod = 'guadalupe'
        else:
            specprod = 'fuji'

        specprod_dir = os.path.join(os.environ.get('DESI_ROOT'), 'spectro', 'redux', specprod, 'healpix')

        programs = sample['PROGRAM'].data
        healpixels = sample['HEALPIX'].data
        targetids = sample['TARGETID'].data

        redrockfiles = [glob(os.path.join(specprod_dir, survey, program, str(healpixel//100), str(healpixel), 'redrock-{}-{}-{}.fits'.format(
            survey, program, healpixel))) for program, healpixel in zip(programs, healpixels)]
        redrockfiles = np.sort(np.unique(redrockfiles))

        Spec.select(redrockfiles=redrockfiles, targetids=targetids)

        data = Spec.read_and_unpack(CFit, fastphot=fastphot, synthphot=True, remember_coadd=True)    

        if args.makeqa:
            fastfit, metadata, coadd_type, _ = read_fastspecfit(outfile)
            
            indx = np.arange(len(data))
            qaargs = [(CFit, EMFit, data[igal], fastfit[indx[igal]], metadata[indx[igal]],
                       coadd_type, fastphot, qadir, None) for igal in np.arange(len(indx))]                
    
            if args.mp > 1:
                import multiprocessing
                with multiprocessing.Pool(args.mp) as P:
                    P.map(_desiqa_one, qaargs)
            else:
                [desiqa_one(*_qaargs) for _qaargs in qaargs]
        else:
            out, meta = Spec.init_output(CFit=CFit, EMFit=EMFit, fastphot=fastphot)
            
            # Fit in parallel
            t0 = time.time()
            if fastphot:
                fitargs = [(iobj, data[iobj], out[iobj], meta[iobj], CFit)
                           for iobj in np.arange(Spec.ntargets)]
                if args.mp > 1:
                    import multiprocessing
                    with multiprocessing.Pool(args.mp) as P:
                        _out = P.map(_fastphot_one, fitargs)
                else:
                    _out = [fastphot_one(*_fitargs) for _fitargs in fitargs]
            else:
                fitargs = [(iobj, data[iobj], out[iobj], meta[iobj], CFit, EMFit, False) # verbose
                           for iobj in np.arange(Spec.ntargets)]
                if args.mp > 1:
                    import multiprocessing
                    with multiprocessing.Pool(args.mp) as P:
                        _out = P.map(_fastspec_one, fitargs)
                else:
                    _out = [fastspec_one(*_fitargs) for _fitargs in fitargs]
                    
            _out = list(zip(*_out))

            #try:
            #    out = vstack(_out[0])
            #    meta = vstack(_out[1])
            #except:
            #    pdb.set_trace()
            out = Table(np.hstack(_out[0]))
            meta = Table(np.hstack(_out[1]))
            if fastphot:
                modelspectra = None
            else:
                try:
                    # need to vstack to preserve the wavelength metadata 
                    modelspectra = vstack(_out[2], metadata_conflicts='error')
                except:
                    errmsg = 'Metadata conflict when stacking model spectra.'
                    log.critical(errmsg)
                    raise ValueError(errmsg)
            log.info('Fitting everything took: {:.2f} sec'.format(time.time()-t0))

            # Write out.
            write_fastspecfit(out, meta, modelspectra=modelspectra, outfile=outfile,
                              specprod=Spec.specprod, coadd_type=Spec.coadd_type,
                              fastphot=fastphot)

    # project parameters
    outdir = '/global/cfs/cdirs/desi/users/ioannis/fastspecfit/lowmass-agn/fujilupe'
    qadir = os.path.join(outdir, 'qa')
    if not os.path.isdir(qadir):
        os.makedirs(qadir, exist_ok=True)

    samplefile = os.path.join(outdir, 'fastspecfit_blagn_test.fits')
    sample = Table(fitsio.read(samplefile))

    #sample = sample[(sample['SURVEY'] == 'sv1') * (sample['PROGRAM'] == 'bright')]

    # select a subset of targets
    if args.targetids:
        targetids = np.array([int(x) for x in args.targetids.split(',')])
        sample = sample[np.isin(sample['TARGETID'], targetids)]

    if args.merge:
        from fastspecfit.mpi import merge_fastspecfit
        merge_fastspecfit(mergedir=outdir, outsuffix='lowmass-agn', supermerge=True)
        return

    if args.makehtml:
        pngfiles = glob(os.path.join(qadir, '*.png'))
        if len(pngfiles) == 0:
            print('No PNG files found in {}'.format(qadir))
            return

        indexfile = os.path.join(qadir, 'index.html')
        print('Writing {}'.format(indexfile))
        with open(indexfile, 'w') as html:
            html.write('<html><body>\n')
            html.write('<style type="text/css">\n')
            html.write('table, td, th {padding: 5px; text-align: center; border: 1px solid black}\n')
            html.write('</style>\n')

            html.write('<h1>Low-mass AGN Project</h1>\n')
            html.write('<h3><a href="../fastspec-lowmass-agn.fits.gz">Download fastspec catalog</a> (<a href="https://fastspecfit.readthedocs.io/en/latest/fastspec.html">Data Model</a>)</h3>\n')

            for survey in set(sample['SURVEY']):
                I = survey == sample['SURVEY']
                for program in set(sample['PROGRAM'][I]):
                    J = program == sample['PROGRAM'][I]

                    html.write('<h2>{} - {}</h2>\n'.format(survey, program))
                    html.write('<table>\n')
                    for S in sample[I][J]:
                        pngfile = os.path.join(qadir, 'fastspec-{}-{}-{}-{}.png'.format(S['SURVEY'], S['PROGRAM'], S['HEALPIX'], S['TARGETID']))
                        if os.path.isfile(pngfile):
                            #print(survey, program, pngfile)
                            html.write('<tr width="90%"><td colspan="4"><a href="{0}"><img src="{0}" height="auto" width="512px"></a></td></tr>\n'.format(os.path.basename(pngfile)))
                            html.write('<tr width="90%">')
                            html.write('<td>{}</td>'.format(S['TARGETID']))
                            html.write('<td>{}</td>'.format(S['SURVEY']))
                            html.write('<td>{}</td>'.format(S['PROGRAM']))
                            html.write('<td>{}</td>'.format(S['HEALPIX']))
                            html.write('</tr>\n')
                        else:
                            pdb.set_trace()
                    html.write('</table>\n')
                    html.write('<br />\n')

        return

    Spec = DESISpectra()
    CFit = ContinuumFit()
    EMFit = EMLineFit()

    if args.fastphot:
        prefix = 'fastphot'
    else:
        prefix = 'fastspec'

    # Need to fit main separately from sv[1-3].
    for survey in set(sample['SURVEY']):
        I = survey == sample['SURVEY']
        for program in set(sample['PROGRAM'][I]):
            J = program == sample['PROGRAM'][I]
            outfile = os.path.join(outdir, '{}-lowmass-agn-{}-{}.fits.gz'.format(prefix, survey, program))
            fit_survey(sample[I][J], survey=survey, outfile=outfile, fastphot=args.fastphot)

if __name__ == '__main__':
    main()
