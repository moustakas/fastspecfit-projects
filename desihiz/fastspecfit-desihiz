#!/usr/bin/env python
"""
Fit the DESI-II Tertiary tiles / observations--
  https://data.desi.lbl.gov/desi/users/raichoor/tertiary-status/tertiary-status.html

salloc -N 1 -C cpu -A desi -t 02:00:00 --qos interactive
time $HOME/code/desihub/fastspecfit-projects/desihiz/fastspecfit-desihiz --vi-redshifts --mp 128 --overwrite --selection suprime 

salloc -N 1 -C gpu --gpus-per-node=4 -A desi -t 04:00:00 --qos interactive
time $HOME/code/desihub/fastspecfit-projects/desihiz/fastspecfit-desihiz --run-redrock --selection suprime

"""
import pdb # for debugging

import os, time
from glob import glob
import numpy as np
import fitsio
from astropy.table import Table, vstack

from desispec.parallel import stdouterr_redirected
from desimodel.footprint import radec2pix
from desiutil.log import get_logger
log = get_logger()

desi_root = os.getenv('DESI_ROOT')
projectdir = os.path.join(desi_root, 'users', 'ioannis', 'desihiz')

# from the redrock-templates project
templatedir = os.path.join(os.getenv('DESI_ROOT'), 'users', 'ioannis', 'fastspecfit', 'redrock-templates', 'rrtemplates')

fspecdirs = {
    'odin': desi_root+'/users/raichoor/laelbg/odin/test/forjohn/v0/desi-odin.fits[SPECINFO]',
    'clauds': desi_root+'/users/raichoor/laelbg/clauds/test/forjohn/v0/desi-clauds.fits[SPECINFO]',
    'suprime': desi_root+'/users/raichoor/laelbg/suprime/test/forjohn/v0/desi-suprime.fits[SPECINFO]',
    }

fphotodirs = {
    'odin': desi_root+'/users/raichoor/laelbg/odin/test/forjohn/v0/desi-odin.fits[PHOTINFO]',
    'clauds': desi_root+'/users/raichoor/laelbg/clauds/test/forjohn/v0/desi-clauds.fits[PHOTOFFINFO]',
    'suprime': desi_root+'/users/raichoor/laelbg/suprime/test/forjohn/v0/desi-suprime.fits[PHOTINFO]',
    }

fphotofiles = {
    'odin': projectdir+'/phot/odin-photoinfo.yaml',
    'clauds': projectdir+'/phot/clauds-photoinfo.yaml',
    'suprime': projectdir+'/phot/suprime-photoinfo.yaml',
    }

def parse_fphotodir(fphotodir):
    # parse the extension name, if any
    fphotoext = None
    photodir = os.path.dirname(fphotodir)
    photobase = os.path.basename(fphotodir)
    if '[' in photobase and ']' in photobase:
        try:
            fphotoext = photobase[photobase.find('[')+1:photobase.find(']')]
            fphotodir = os.path.join(photodir, photobase[:photobase.find('[')])
        except:
            pass
    return fphotodir, fphotoext        

def read_desihiz(selection='odin', targetids=None, vi_redshifts=False):

    fspecdir = fspecdirs[selection]
    fphotodir = fphotodirs[selection]

    fspecdir, fspecext = parse_fphotodir(fspecdir)
    fphotobasedir, fphotoext = parse_fphotodir(fphotodir)

    fphoto = Table(fitsio.read(fphotobasedir, ext=fphotoext))
    log.info(f'Read {len(fphoto):,d} objects from {fphotobasedir}')

    fspec = Table(fitsio.read(fspecdir, ext=fspecext))
    log.info(f'Read {len(fspec):,d} objects from {fspecdir}')
    assert(np.all(fspec['TARGETID'] == fphoto['TARGETID']))

    if targetids:
        I = np.where(np.isin(fspec['TARGETID'], np.array(','.split(targetids))))[0]
        log.info(f'Trimming to {len(I):,d} specified TARGETIDs.')
        fphoto = fphoto[I]
        fspec = fspec[I]

    if vi_redshifts:
        #I = np.where(np.isfinite(fspec['VI_Z']) * (fspec['VI_Z'] > 1e-3))[0]
        #log.info(f'Trimming to {len(I):,d} objects with VI_Z>0.001.')
        I = np.where(np.isfinite(fspec['VI_Z']) * (fspec['VI_Z'] > 1e-3) * (fspec['VI_QUALITY'] >= 3.))[0]
        log.info(f'Trimming to {len(I):,d} objects with VI_Z>0.001 and VI_QUALITY>=3.')
        fphoto = fphoto[I]
        fspec = fspec[I]

    return fphoto, fspec

def run_redrock(selection='odin', targetids=None, rrdetails=False, overwrite=False):
    """Wrapper to run Redrock on the VI healpixels.

    """
    from redrock.external.desi import rrdesi
    from desispec.io import read_spectra, write_spectra

    outdir = os.path.join(projectdir, selection, 'redux')
    if not os.path.isdir(outdir):
        os.makedirs(outdir, exist_ok=True)

    fphoto, fspec = read_desihiz(selection=selection, targetids=targetids)

    for orig_coaddfile in sorted(set(fspec['COADDFN'])):
        I = orig_coaddfile == fspec['COADDFN']
        healpix = fspec['HEALPIX'][I][0]
        alltargetids = fspec['TARGETID'][I].data

        # copy the data just in case we want to run the after-burners
        coaddfile = os.path.join(outdir, f'coadd-{healpix}.fits')
        if not os.path.isfile(coaddfile) or overwrite:
            spec = read_spectra(orig_coaddfile, targetids=alltargetids)
            assert(np.all(spec.target_ids() == alltargetids))
            log.info(f'Writing {len(alltargetids)} targets to {coaddfile}')
            write_spectra(coaddfile, spec)
            del spec

        redrockfile = os.path.join(outdir, f'redrock-{healpix}.fits')
        rrdetailsfile = os.path.join(outdir, f'rrdetails-{healpix}.h5')
        if not os.path.isfile(redrockfile) or overwrite:
            cmd = f'-i {coaddfile} -o {redrockfile} --gpu --max-gpuprocs=4 --mp 1 --zscan-galaxy=-0.005,4.0,3e-4'
            if rrdetails:
                cmd += f' -d {rrdetailsfile}'
            log.info(f'rrdesi {cmd}')
            rrdesi(cmd.split())
        else:
            log.info(f'Skipping existing file {redrockfile}')


def main():
    """Main wrapper

    """
    import argparse    
    from importlib import resources

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--selection', type=str, choices=['odin', 'suprime', 'clauds'], help='Sample selection to model.')
    parser.add_argument('--mp', type=int, default=1, help='Number of multiprocessing processes per MPI rank or node.')
    parser.add_argument('-n', '--ntargets', type=int, help='Number of targets to process in each file.')
    parser.add_argument('--targetids', type=str, default=None, help='Comma-separated list of TARGETIDs to process.')
    parser.add_argument('--fastphot', action='store_true', help='Fit just the broadband photometry.')
    parser.add_argument('--vi-redshifts', action='store_true', help='Refit at the VI redshifts.')
    parser.add_argument('--overwrite', action='store_true', help='Overwrite existing files.')
    parser.add_argument('--nolog', action='store_true', help='Do not write a log (useful for debugging).')
    parser.add_argument('--run-redrock', action='store_true', help='Run Redrock.')
    parser.add_argument('--merge', action='store_true', help='Merge all individual catalogs into one large file.')
    parser.add_argument('--makeqa', action='store_true', help='Build QA in parallel.')
    parser.add_argument('--makehtml', action='store_true', help='Build the HTML page.')
    args = parser.parse_args()

    if args.fastphot:
        extname = 'FASTPHOT'
        prefix = 'fastphot'
        fits = 'fits'
    else:
        extname = 'FASTSPEC'
        prefix = 'fastspec'
        fits = 'fits.gz'

    if args.vi_redshifts:
        prefix += '-vi'
        
    fastdir = os.path.join(projectdir, args.selection, prefix)
    if not os.path.isdir(fastdir):
        os.makedirs(fastdir, exist_ok=True)

    if args.merge:
        from fastspecfit.mpi import _domerge
        mergefile = os.path.join(projectdir, args.selection, f'{prefix}-{args.selection}.fits')
        if not os.path.isfile(mergefile) or args.overwrite:
            fastfiles = glob(os.path.join(fastdir, f'{prefix}-*.fits*'))
            #fastfiles = glob(os.path.join(fastdir, f'{prefix}?????.fits*'))
            _domerge(fastfiles, extname=extname, mergefile=mergefile,
                     fastphot=args.fastphot, mp=args.mp)
        else:
            log.info(f'Output file {mergefile} exists; use --overwrite to, well, overwrite.')
    elif args.makeqa:
        qadir = os.path.join(projectdir, tertiary, f'{fcmd}', 'qa')
        if not os.path.isdir(qadir):
            os.makedirs(qadir, exist_ok=True)
        fastfiles = glob(os.path.join(projectdir, tertiary, f'{fcmd}', f'{prefix}?????.fits*'))
        for fastfile in fastfiles:
            healpix = os.path.basename(fastfile).split('-')[1].split('.')[0]
            redrockfile = os.path.join(datadir, f'redrock-{healpix}.fits')
            cmd = f'fastspecfit-qa {fastfile} -o {qadir} --redrockfiles {redrockfile} --mp {args.mp} '
            cmd += f'--fphotodir {fphotodir} --fphotofile {fphotofile} --maxphotwave {maxphotwave}'
            if args.ntargets:
                cmd += f' --ntargets {args.ntargets}'
            if args.overwrite:
                cmd += ' --overwrite'
            log.info(cmd)
            err = subprocess.call(cmd.split())
    elif args.run_redrock:
        os.environ['RR_TEMPLATE_DIR'] = templatedir # note!
        run_redrock(selection=args.selection, targetids=args.targetids, overwrite=args.overwrite)
    elif args.makehtml:
        raise NotImplementedError
    else:
        fphoto, fspec = read_desihiz(selection=args.selection, targetids=args.targetids,
                                     vi_redshifts=args.vi_redshifts)
        
        fphotofile = fphotofiles[selection]

        for coaddfile in sorted(set(fspec['COADDFN'])):
            I = coaddfile == fspec['COADDFN']
            if args.vi_redshifts:
                targetids = ','.join(fspec['TARGETID'][I].astype(str))
                input_redshifts = ','.join(fspec['VI_Z'][I].astype(str))
                
            redrockfile = coaddfile.replace('coadd-', 'redrock-')
            fastfile = os.path.join(fastdir, os.path.basename(redrockfile).replace('redrock-', f'{prefix}-'))
            if not args.fastphot:
                fastfile += '.gz'
            if not os.path.isfile(fastfile) or args.overwrite:
                cmdargs = f'{redrockfile} -o {fastfile} --mp {args.mp} --fphotodir={fphotodir} --fphotofile={fphotofile}'
                if args.ntargets:
                    cmdargs += f' --ntargets {args.ntargets}'
                if args.vi_redshifts:
                    cmdargs += f' --targetids {targetids} --input-redshifts {input_redshifts}'

                if args.fastphot:
                    from fastspecfit.fastspecfit import fastphot as fast
                    log.info(f'fastphot {cmdargs}')
                else:
                    from fastspecfit.fastspecfit import fastspec as fast
                    log.info(f'fastspec {cmdargs}')
                if args.nolog:
                    fast(args=cmdargs.split())
                else:
                    logfile = fastfile.replace('.fits', '.log').replace('.gz', '')
                    with stdouterr_redirected(to=logfile, overwrite=True):
                        fast(args=cmdargs.split())
            else:
                log.info(f'Output file {fastfile} exists and --overwrite not set.')


if __name__ == '__main__':
    main()
