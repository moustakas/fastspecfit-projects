#!/usr/bin/env python
"""
Fit the a single sv1/bright healpixel using Prospector.

time python $HOME/code/desihub/fastspecfit-projects/fastpaper1/prospector-modeling --priors delayedtau --sedfit --verbose --mp 12
time python $HOME/code/desihub/fastspecfit-projects/fastpaper1/prospector-modeling --priors delayedtau --qaplots --verbose --mp 12

time python $HOME/code/desihub/fastspecfit-projects/fastpaper1/prospector-modeling --priors continuitysfh --sedfit --verbose --mp 12
time python $HOME/code/desihub/fastspecfit-projects/fastpaper1/prospector-modeling --priors continuitysfh --qaplots --verbose --mp 12

"""
import os, time, argparse, pdb
import numpy as np
import fitsio
from astropy.table import Table

def bestfit_sed(obs, theta=None, sps=None, model=None, png=None, verbose=False):
    """Plot the (photometric) best-fitting SED.

    """
    import matplotlib.pyplot as plt
    from matplotlib.ticker import MultipleLocator, ScalarFormatter, FuncFormatter
    
    import seaborn as sns
    sns.set(style='ticks', font_scale=1.5, palette='Set2')
    
    ang2micron = 1e-4 # Angstrom --> micron
    maggies2mJy = 10**(0.4*16.4) # maggies --> mJy
    
    def _galaxyphot(obs):
        """Get the galaxy photometry and inverse variances (converted to mJy) and filter
        effective wavelengths (converted to microns).
    
        """
        mask = obs['phot_mask']
    
        weff = np.array([f.wave_effective for f in obs['filters']]) * ang2micron
        fwhm = np.array([f.effective_width for f in obs['filters']]) * ang2micron
    
        if False:
            galphot = obs['maggies'][mask] * maggies2mJy
            galphoterr = obs['maggies_unc'][mask] * maggies2mJy
        else:
            galphot = -2.5 * np.log10(obs['maggies'][mask])
            galphoterr = 2.5 * obs['maggies_unc'][mask] / obs['maggies'][mask] / np.log(10.)
    
        return weff, fwhm, galphot, galphoterr, mask

    def _sed(model, theta, obs, sps):
        """Construct the SED for a given set of parameters. Divide by mextra to account
        for the *current* mass in stars (rather than the integrated stellar mass
        based on the SFH.
    
        Also convert wavelengths from Angstroms to microns and fluxes from maggies
        to mJy.
    
        """
        modelwave = sps.wavelengths * (1 + obs['zred']) # [observed-frame wavelengths]
        modelwave *= ang2micron
        
        modelspec, modelphot, mextra = model.mean_model(theta, obs, sps=sps)
        if False:
            modelspec *= maggies2mJy
            modelphot *= maggies2mJy
        else:
            modelspec = -2.5 * np.log10(modelspec)
            modelphot = -2.5 * np.log10(modelphot)
        #print(modelphot)
        
        return modelwave, modelspec, modelphot
    
    # Get the galaxy photometry and filter info.
    weff, fwhm, galphot, galphoterr, mask = _galaxyphot(obs)

    #print('Rendering the maximum-likelihood model...', end='')
    t0 = time.time()
    modelwave, modelspec, modelphot = _sed(model=model, theta=theta, obs=obs, sps=sps)
    #print('...took {:.2f} sec'.format(time.time()-t0))
    #print(modelspec.min(), modelspec.max())

    # Establish the wavelength and flux limits.
    minwave, maxwave = 0.1, 35.0
    #minwave, maxwave = np.min(weff - 5*fwhm), np.max(weff + fwhm)

    inrange = (modelwave > minwave) * (modelwave < maxwave)
    maxflux = np.hstack( (galphot + 1.*galphoterr, modelspec[inrange]) ).max() + 0.5
    minflux = np.hstack( (galphot - 1.*galphoterr, modelspec[inrange]) ).min() - 0.5
    if maxflux > 30.:
        maxflux = 30.
    #minflux, maxflux = (12, 22)

    fig, ax = plt.subplots(figsize=(8, 6))
    ax.plot(modelwave, modelspec, alpha=1.0, label='Model spectrum', color='k')
    ax.errorbar(weff, modelphot, marker='s', ls='', lw=3, markersize=15, markerfacecolor='none',
                markeredgewidth=3, alpha=0.6, label='Model photometry')
    ax.errorbar(weff[mask], galphot, yerr=galphoterr, marker='o', ls='', lw=2, markersize=10,
                markeredgewidth=2, alpha=0.8, label='Observed photometry',
                elinewidth=2, capsize=5)
                
    ax.set_xlabel(r'Observed-Frame Wavelength (${}$m)'.format('\mu'))
    ax.set_ylabel('AB mag')
    #ax.set_ylabel('Flux Density (mJy)')
    ax.set_xlim(minwave, maxwave)
    ax.set_ylim(minflux, maxflux)
    ax.set_xscale('log')
    ax.invert_yaxis()
    #ax.set_yscale('log')
    #ax.legend(loc='upper right', fontsize=16, frameon=True)
    # https://stackoverflow.com/questions/21920233/matplotlib-log-scale-tick-label-number-formatting
    ax.get_xaxis().set_major_formatter(FuncFormatter(lambda y, _: '{:.16g}'.format(y)))
    #ax.get_xaxis().set_major_formatter(ScalarFormatter())
    plt.subplots_adjust(left=0.15, right=0.95, bottom=0.18, top=0.95)

    if png:
        if verbose:
            print(f'Writing {png}')
        fig.savefig(png)
        plt.close()

#def logmass2mass(logmass=11., **extras):
#    return 10.**logmass


def get_bands_and_filters(dec):

    bands = ['g', 'r', 'z', 'w1', 'w2', 'w3', 'w4']
    if dec > 32.375:
        filters = ['BASS-g', 'BASS-r', 'MzLS-z']
    else:
        filters = ['decam_g', 'decam_r', 'decam_z']
    filters = filters + ['wise_w1', 'wise_w2', 'wise_w3', 'wise_w4']

    return bands, filters


def load_obs(phot, verbose=False, sps=None):
    """Load the photometry.

    import fitsio
    tt = fitsio.read('/Users/ioannis/work/desi/spectro/fastspecfit/fuji/v3.1/catalogs/fastspec-fuji-sv1-bright.fits', 'METADATA')
    fitsio.write('/Users/ioannis/work/desi/users/ioannis/fastspecfit/fastpaper1/data/prospector/phot-sv1-bright-7020.fits', tt[tt['HEALPIX'] == 7020], clobber=True)

    """
    import sedpy
    from prospect.utils.obsutils import fix_obs    

    from fastspecfit.util import TabulatedDESI
    cosmo = TabulatedDESI()

    bands, filters = get_bands_and_filters(phot['DEC'])
    maggies = np.array([1e-9 * phot[f'FLUX_{band.upper()}'] for band in bands])
    ivarmaggies = np.array([1e18 * phot[f'FLUX_IVAR_{band.upper()}'] for band in bands])
    maggies_unc = np.zeros_like(maggies) + 1e16

    # Minimum uncertainties
    factor = 2.5 / np.log(10.)
    minerr = [0.02, 0.02, 0.02, 0.05, 0.05, 0.05, 0.05]
    for iband in range(len(bands)):
        if maggies[iband] > 0 and ivarmaggies[iband] > 0:
            err = factor / np.sqrt(ivarmaggies[iband]) / maggies[iband]
            err2 = err**2 + minerr[iband]**2
            ivarmaggie = factor**2 / (maggies[iband]**2 * err2)
            maggies_unc[iband] = 1. / np.sqrt(ivarmaggie)

    obs = {}
    obs['zred'] = phot['Z']
    obs['lumdist'] = cosmo.luminosity_distance(obs['zred']) # [Mpc]
    obs["filters"] = sedpy.observate.load_filters(filters)

    obs["maggies"] = maggies
    obs["ivarmaggies"] = ivarmaggies
    obs["maggies_unc"] = maggies_unc

    # Create a handy vector of effective wavelengths (optional) 
    obs["phot_wave"] = [f.wave_effective for f in obs["filters"]]
    obs["wavelength"] = None # no spectrum
    obs["spectrum"] = None
    obs['phot_mask'] = np.array((ivarmaggies > 0.) * (maggies > 0.)) # True is good
    obs = fix_obs(obs)

    run_params = {}
    run_params['verbose'] = verbose
    run_params['debug'] = False
    run_params['param_file'] = '' # no parameter file

    run_params['do_powell'] = False
    run_params['do_levenberg'] = True
    run_params['min_method'] = 'lm'
    run_params['nmin'] = 10
    
    if sps:
        run_params['sps_libraries'] = sps.ssp.libraries

    # dynesty Fitter parameters
    dyn_params = {
        'nested_bound': 'multi',  # bounding method
        'nested_sample': 'unif', # 'unif', 'slice' # sampling method
        'nested_nlive_init': 100,
        'nested_nlive_batch': 100,
        'nested_bootstrap': 0,
        'nested_dlogz_init': 0.05,
        'nested_weight_kwargs': {"pfrac": 1.0},
        'nested_target_n_effective': 10000,
        #'nested_stop_kwargs': {"post_thresh": 0.05}
        }
    run_params.update(dyn_params)
    
    return obs, run_params


def load_sps(priors, zcontinuous=1, verbose=False):
    """zcontinuous - interpolate between metallicity values.

    """
    from prospect.sources import CSPSpecBasis, FastStepBasis

    if verbose:
        #print('Loading SPS models...', end='')
        pass
    t0 = time.time()

    if priors == 'continuitysfh':
        sps = FastStepBasis(zcontinuous=zcontinuous)
    else:
        sps = CSPSpecBasis(zcontinuous=zcontinuous)

    if verbose:
        #print('...took {:.2f} sec'.format(time.time()-t0))
        #print(sps.ssp.libraries)
        pass
    return sps


def load_model(obs, template_library='delayedtau', verbose=False):
    """
    http://dfm.io/python-fsps/current/stellarpop_api/#api-reference
    https://github.com/moustakas/siena-astrophysics/blob/master/research/redmapper/redmapper-stellar-mass.py#L125-L197    
    
    """
    from prospect.models import priors
    from prospect.models.sedmodel import SedModel
    from prospect.models.templates import TemplateLibrary, adjust_continuity_agebins, describe
    from prospect.models.transforms import dustratio_to_dust1

    def base_delayed_tau():
        model_params = TemplateLibrary['parametric_sfh']
    
        # Initialize with sensible numbers and prior ranges.
        model_params['tau']['init'] = 10.
        model_params['tau']['prior'] = priors.LogUniform(mini=0.01, maxi=30.)

        model_params['tage']['init'] = 1.
        model_params['tage']['prior'] = priors.LogUniform(mini=0.01, maxi=14.)

        model_params['logzsol']['init'] = 0.
        model_params['logzsol']['prior'] = priors.TopHat(mini=-1., maxi=0.3)

        model_params['mass']['init'] = 10.**10.5
        model_params['mass']['prior'] = priors.TopHat(mini=10.**6., maxi=10.**13.)
    
        ## optimize log-stellar mass, not linear stellar mass
        #model_params['logmass'] = {'N': 1, 'isfree': True, 'init': 11.,
        #                           'prior': priors.TopHat(mini=6., maxi=13.),
        #                           'units': '$M_{\odot}$'}
        #model_params['mass']['isfree'] = False
        #model_params['mass']['init'] = 10**model_params['logmass']['init']
        #model_params['mass']['prior'] = None
        #model_params['mass']['depends_on'] = logmass2mass
        
    
        #print('HACK!!!!!!!!!!!!!')
        #model_params['tau']['isfree'] = False
        #model_params['tage']['isfree'] = False
        #model_params['logzsol']['isfree'] = False
        #model_params['dust2']['isfree'] = False
    
        return model_params

    if template_library == 'delayedtau':
        # Underlying delayed tau model.
        model_params = base_delayed_tau()

    if template_library == 'continuitysfh':
        # Underlying delayed tau model.
        model_params = TemplateLibrary['continuity_sfh']

        model_params['logzsol']['init'] = 0.
        model_params['logzsol']['isfree'] = False        
        #model_params['logzsol']['prior'] = priors.TopHat(mini=-1., maxi=0.3)

        model_params['logmass']['init'] = 10.5
        model_params['logmass']['prior'] = priors.TopHat(mini=6., maxi=13.)

        model_params = adjust_continuity_agebins(model_params, tuniv=14., nbins=5)

    # Add dust emission (with fixed dust SED parameters).
    model_params.update(TemplateLibrary['dust_emission'])
    #model_params['duste_gamma']['isfree'] = True

    model_params['dust2']['init'] = 0.1 # diffuse dust
    model_params['dust2']['prior'] = priors.TopHat(mini=0.0, maxi=4.0)

    # Add more dust flexibility.
    model_params['dust_type'] = {'N': 1, 'isfree': False, 'init': 0, 'units': 'dust model'}
    model_params['dust_index'] = {'N': 1, 'isfree': False, 'init': -0.7,
                                  'units': 'power-law index', 'prior': None}

    #model_params['dust1'] = {'N': 1, 'isfree': False, 'init': 0.0, 'prior': None,
    #                         'units': 'optical depth towards young stars',
    #                         'depends_on': dustratio_to_dust1}
    #model_params['dust_ratio'] = {'N': 1, 'isfree': True, 'init': 1.0,
    #                              'prior': priors.TopHat(mini=1.0, maxi=10.0),
    #                              'units': 'dust1/dust2 ratio (optical depth to young stars vs diffuse)'}

    # Add nebular emission.
    model_params.update(TemplateLibrary['nebular'])

    # Fixed redshift / luminosity distance
    model_params["lumdist"] = {"N": 1, "isfree": False, "init": obs['lumdist'], "units": "Mpc"}
    model_params['zred'] = {"N": 1, "isfree": False, "init": obs['zred']}

    model_params['imf_type']['init'] = 1 # Chabrier
        
    # Now instantiate the model using this new dictionary of parameter specifications
    model = SedModel(model_params)
    #if verbose:
    #    print(model)

    return model


def _one_sedfit(mpargs):
    return one_sedfit(*mpargs)

    
def one_sedfit(phot, priors, datadir=None, verbose=False, overwrite=False):
    """Fit a single object."""

    import prospect.io
    import prospect.fitting
    import warnings

    t0 = time.time()

    if datadir is None:
        datadir = '.'

    basefile = f'{priors}-{phot["SURVEY"]}-{phot["PROGRAM"]}-{phot["TARGETID"]}'
    #outfile = os.path.join(datadir, f'{basefile}.hdf5')
    outfile = os.path.join(datadir, f'{basefile}.fits')
    if os.path.isfile(outfile):
        if overwrite:
            if verbose:
                print(f'Overwriting existing file {outfile}')
            os.remove(outfile)
        else:
            if verbose:
                print(f'Reading {outfile}')
                #print(f'Skipping existing file {outfile}')
            out = Table(fitsio.read(outfile))
            return out
    
    bands, _ = get_bands_and_filters(phot['DEC'])
    
    # Initialize the SPS library (takes a bit), the photometry, the "run
    # parameters" dictionary, and the model priors.
    sps = load_sps(priors=priors, verbose=verbose)
    obs, rp = load_obs(phot, verbose=verbose, sps=sps)
    model = load_model(obs, priors, verbose=verbose)

    out = Table(phot).copy()
    
    if np.sum(obs['phot_mask']) < 6: # require at least 5 bands
        print(f'Too few good fluxes in {basefile}')
        for band in bands:
            out[f'MODELFLUX_{band.upper()}'] = np.float32(0.0)
        out['MREMAIN'] = np.float32(0.0)
        out['CHI2'] = np.float32(0.0)
        for pp in model.theta_labels():
            out[pp.upper()] = np.float32(0.0)
    else:
        with warnings.catch_warnings():
            warnings.simplefilter('ignore')
            pout = prospect.fitting.fit_model(obs, model, sps, noise=(None, None), **rp,
                                              optimize=True, dynesty=False, emcee=False)
            
        bestsed, bestmaggies, mremain = model.mean_model(model.theta, obs, sps=sps)
    
        # pack the results into an astropy table
        for band, bestmaggie in zip(bands, bestmaggies):
            out[f'MODELFLUX_{band.upper()}'] = np.float32(1e9 * bestmaggie) # [nanomaggies]
        out['MREMAIN'] = np.float32(mremain)
        out['CHI2'] = np.float32(np.sum(obs['ivarmaggies'] * (obs['maggies'] - bestmaggies)**2))
        for pp, val in zip(model.theta_labels(), model.theta):
            out[pp.upper()] = np.float32(val)

    out['MREMAIN'] = mremain
    out['CHI2'] = chi2
    pdb.set_trace()
    for pp, val in zip(model.theta_labels(), model.theta):
        out[pp.upper()] = np.float32(val)

    out.write(outfile, overwrite=True)
    #with warnings.catch_warnings():
    #    warnings.simplefilter('ignore')
    #    prospect.io.write_results.write_hdf5(
    #        h5file, rp, model, obs, pout['sampling'][0], pout['optimization'][0], 
    #        tsample=pout['sampling'][1], toptimize=pout['optimization'][1])
        
    if verbose:
        print(f'Building {outfile} took {time.time() - t0:.2f} sec')

    return out


def _one_qaplot(mpargs):
    return one_qaplot(*mpargs)

    
def one_qaplot(phot, priors, datadir=None, verbose=False):
    """SED QA for a single object."""

    basefile = f'{priors}-{phot["SURVEY"]}-{phot["PROGRAM"]}-{phot["TARGETID"]}'
    resultsfile = os.path.join(datadir, f'{basefile}.fits')
    pngfile = os.path.join(datadir, f'{basefile}-sed.png')
    
    #print(f'Reading {resultsfile}')

    result = Table(fitsio.read(resultsfile))

    sps = load_sps(priors=priors, verbose=verbose)
    obs, rp = load_obs(phot, verbose=verbose, sps=sps)
    model = load_model(obs, priors, verbose=verbose)

    theta = np.array([result[pp.upper()][0] for pp in model.theta_labels()])
    bestfit_sed(obs, sps=sps, model=model, theta=theta, verbose=verbose, png=pngfile)

def main():
    """
    Main wrapper script.

    """
    parser = argparse.ArgumentParser()
    parser.add_argument('--priors', default='delayedtau', type=str, choices=['delayedtau', 'continuitysfh'],
                        help='Choose the model priors.')
    parser.add_argument('--seed', default=1, type=int, help='Seed for random number generation.')
    parser.add_argument('--mp', default=1, type=int, help='Number of cores to use.')
    parser.add_argument('--sedfit', action='store_true', help='Do the SED fit.')
    parser.add_argument('--qaplots', action='store_true', help='Make pretty plots.')
    parser.add_argument('--overwrite', action='store_true', help='Overwrite existing fitting results.')
    parser.add_argument('--verbose', action='store_true', help='Be verbose.')
    args = parser.parse_args()
    
    datadir = os.path.join(os.getenv('DESI_ROOT'), 'users', 'ioannis', 'fastspecfit', 
                           'fastpaper1', 'data', 'prospector')
    photfile = os.path.join(datadir, 'phot-sv1-bright-7020.fits')

    cols = ['SURVEY', 'PROGRAM', 'HEALPIX', 'TARGETID', 'RA', 'DEC', 'Z', 
            'FLUX_G', 'FLUX_R', 'FLUX_Z', 'FLUX_W1', 'FLUX_W2', 'FLUX_W3', 'FLUX_W4',
            'FLUX_IVAR_G', 'FLUX_IVAR_R', 'FLUX_IVAR_Z', 
            'FLUX_IVAR_W1', 'FLUX_IVAR_W2', 'FLUX_IVAR_W3', 'FLUX_IVAR_W4']
    allphot = Table(fitsio.read(photfile, columns=cols))
    #allphot = allphot[15:16]
    #allphot = allphot[allphot['TARGETID'] == 39633331532335268]
    #allphot = allphot[:1]
    allphot = allphot[allphot['TARGETID'] == 39633321176598433]

    if args.sedfit:
        mpargs = [(phot, args.priors, datadir, args.verbose, args.overwrite) for phot in allphot]
        if args.mp > 1:
            import multiprocessing
            with multiprocessing.Pool(args.mp) as P:
                out = P.map(_one_sedfit, mpargs)
        else:
            out = [one_sedfit(*mparg) for mparg in mpargs]
            
        out = Table(np.vstack(out))
        if len(out) != len(allphot):
            print('Missing some objects.')
            pdb.set_trace()

        outfile = os.path.join(datadir, f'{args.priors}.fits')
        out.write(outfile, overwrite=True)
        print(f'Wrote {len(out)} objects to {outfile}')        

    if args.qaplots:
        mpargs = [(phot, args.priors, datadir, args.verbose) for phot in allphot]
        if args.mp > 1:
            import multiprocessing
            with multiprocessing.Pool(args.mp) as P:
                P.map(_one_qaplot, mpargs)
        else:
            [one_qaplot(*mparg) for mparg in mpargs]

if __name__ == '__main__':
    main()
