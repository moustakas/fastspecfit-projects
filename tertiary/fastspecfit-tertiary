#!/usr/bin/env python
"""
Fit the DESI-II Tertiary tiles / observations--
  https://desi.lbl.gov/trac/wiki/SurveyOps/TertiaryPrograms#TertiaryPrograms

--Tertiary 18 - ODIN + WIRO LAEs
--Tertiary 23 - COSMOS

time /global/u2/i/ioannis/code/desihub/fastspecfit-projects/tertiary/fastspecfit-tertiary --mp 128 --tertiary 18
time /global/u2/i/ioannis/code/desihub/fastspecfit-projects/tertiary/fastspecfit-tertiary --mp 128 --tertiary 18 --merge
time /global/u2/i/ioannis/code/desihub/fastspecfit-projects/tertiary/fastspecfit-tertiary --mp 128 --tertiary 18 --fastphot
time /global/u2/i/ioannis/code/desihub/fastspecfit-projects/tertiary/fastspecfit-tertiary --mp 128 --tertiary 18 --fastphot --merge

time /global/u2/i/ioannis/code/desihub/fastspecfit-projects/tertiary/fastspecfit-tertiary --tertiary 18 --vi-redshifts --mp 24
time /global/u2/i/ioannis/code/desihub/fastspecfit-projects/tertiary/fastspecfit-tertiary --tertiary 18 --vi-redshifts --merge --mp 24
time /global/u2/i/ioannis/code/desihub/fastspecfit-projects/tertiary/fastspecfit-tertiary --tertiary 18 --vi-redshifts --makeqa --mp 24

time /global/u2/i/ioannis/code/desihub/fastspecfit-projects/tertiary/fastspecfit-tertiary --mp 128 --tertiary 23
time /global/u2/i/ioannis/code/desihub/fastspecfit-projects/tertiary/fastspecfit-tertiary --mp 128 --tertiary 23 --merge
time /global/u2/i/ioannis/code/desihub/fastspecfit-projects/tertiary/fastspecfit-tertiary --mp 128 --tertiary 23 --fastphot
time /global/u2/i/ioannis/code/desihub/fastspecfit-projects/tertiary/fastspecfit-tertiary --mp 128 --tertiary 23 --fastphot --merge

"""
import pdb # for debugging

import os, time, subprocess
from glob import glob
import numpy as np
import fitsio
from astropy.table import Table, vstack

from desiutil.log import get_logger
log = get_logger()

def main():
    """Main wrapper

    """
    import argparse    

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--tertiary', type=str, choices=['18', '23'], help='Tertiary program to model.')
    parser.add_argument('--mp', type=int, default=1, help='Number of multiprocessing processes per MPI rank or node.')
    parser.add_argument('-n', '--ntargets', type=int, help='Number of targets to process in each file.')
    parser.add_argument('--outdir', type=str, default='/global/cfs/cdirs/desi/users/ioannis/tertiary', help='Output directory.')
    parser.add_argument('--targetids', type=str, default=None, help='Comma-separated list of TARGETIDs to process.')
    parser.add_argument('--fastphot', action='store_true', help='Fit just the broadband photometry.')
    parser.add_argument('--vi-redshifts', action='store_true', help='Refit at the VI redshifts.')
    parser.add_argument('--overwrite', action='store_true', help='Overwrite existing files.')
    parser.add_argument('--nolog', action='store_true', help='Do not write a log (useful for debugging).')
    parser.add_argument('--merge', action='store_true', help='Merge all individual catalogs into one large file.')
    parser.add_argument('--makeqa', action='store_true', help='Build QA in parallel.')
    parser.add_argument('--makehtml', action='store_true', help='Build the HTML page.')
    args = parser.parse_args()

    tertiary = f'tertiary{args.tertiary}'
    
    datadirs = {
        '18': '/global/cfs/cdirs/desi/users/raichoor/laelbg/daily/healpix/tertiary18-thru20230112',
        '23': '/global/cfs/cdirs/desi/users/raichoor/laelbg/daily/healpix/tertiary23-thru20230326',
        }
    datadir = datadirs[args.tertiary]

    if args.fastphot:
        fcmd = 'fastphot'
        prefix = 'fastphot-'
        fits = 'fits'
        outdir = os.path.join(args.outdir, tertiary, 'fastphot')
    else:
        fcmd = 'fastspec'
        prefix = 'fastspec-'
        fits = 'fits.gz'
        outdir = os.path.join(args.outdir, tertiary, 'fastspec')

    if not os.path.isdir(outdir):
        os.makedirs(outdir, exist_ok=True)

    if args.vi_redshifts:
        # Fit at the VI redshifts (only for Tertiary 18).
        if args.tertiary == '18':
            if args.merge:
                from fastspecfit.mpi import _domerge

                mergefile = os.path.join(args.outdir, tertiary, f'{prefix}vi-{tertiary}.fits')
                if not os.path.isfile(mergefile) or args.overwrite:
                    fastfiles = glob(os.path.join(args.outdir, tertiary, f'{prefix}vi', f'{prefix}vi-?????.fits*'))
                    _domerge(fastfiles, extname=fcmd.upper(), mergefile=mergefile,
                             fastphot=args.fastphot, mp=args.mp)
                else:
                    print(f'Output file {mergefile} exists; use --overwrite to, well, overwrite.')
            elif args.makeqa:
                outdir = os.path.join(args.outdir, tertiary, f'{prefix}vi')
                fastfiles = glob(os.path.join(args.outdir, tertiary, f'{prefix}vi', f'{prefix}vi-?????.fits*'))
                for fastfile in fastfiles:
                    healpix = os.path.basename(fastfile).split('-')[2].split('.')[0]
                    redrockfile = os.path.join(datadir, f'redrock-{healpix}.fits')
                    cmd = f'fastspecfit-qa {fastfile} -o {outdir} --redrockfiles {redrockfile} --mp {args.mp}'
                    if args.overwrite:
                        cmd += ' --overwrite'
                    print(cmd)
                    err = subprocess.call(cmd.split())
            elif args.makehtml:
                raise NotImplementedError
            else:
                # Fit!
                vifile = os.path.join(args.outdir, tertiary, 'WIRO_LAE_targets.csv')
                vi = Table.read(vifile)
                print('Read {} objects from {}'.format(len(vi), vifile))
    
                mm = Table(fitsio.read(os.path.join(args.outdir, tertiary, 'fastphot-tertiary18.fits'), 'METADATA'))
                I = np.hstack([np.where(mm['TARGETID'] == tid)[0] for tid in vi['TARGETID']])
                mm = mm[I]
                I = np.hstack([np.where(vi['TARGETID'] == tid)[0] for tid in mm['TARGETID']])
                vi = vi[I]
                print(mm)
                print(vi)
    
                for healpix in set(mm['HEALPIX']):
                    I = healpix == mm['HEALPIX']

                    targetids = ','.join(mm['TARGETID'][I].astype(str))
                    input_redshifts = ','.join(vi['VI_redshift'][I].astype(str))
                    redrockfile = os.path.join(datadir, f'redrock-{healpix}.fits')
                    outfile = os.path.join(args.outdir, tertiary, f'{prefix}vi', f'{prefix}vi-{healpix}.{fits}')
    
                    cmd = f'fastspec {redrockfile} -o {outfile} --targetids {targetids} --input-redshifts {input_redshifts} --mp {args.mp}'
                    print(cmd)
                    err = subprocess.call(cmd.split())
    elif args.merge:
        from fastspecfit.mpi import _domerge

        mergefile = os.path.join(args.outdir, tertiary, f'{prefix}{tertiary}.fits')
        if not os.path.isfile(mergefile) or args.overwrite:
            fastfiles = glob(os.path.join(outdir, f'{prefix}?????.fits*'))
            _domerge(fastfiles, extname=fcmd.upper(), mergefile=mergefile,
                     fastphot=args.fastphot, mp=args.mp)
        else:
            print(f'Output file {mergefile} exists; use --overwrite to, well, overwrite.')
    elif args.makeqa:
        raise NotImplementedError
    elif args.makehtml:
        raise NotImplementedError
    else:
        # fit!
        redrockfiles = glob(os.path.join(datadir, 'redrock-?????.fits'))
        for redrockfile in redrockfiles:
            fastfile = os.path.join(outdir, os.path.basename(redrockfile).replace('redrock-', prefix))
            if not args.fastphot:
                fastfile += '.gz'
                
            if not os.path.isfile(fastfile) and not args.overwrite:
                cmd = f'{fcmd} {redrockfile} -o {fastfile} --mp {args.mp}'
                if args.ntargets:
                    cmd += ' --ntargets {}'.format(args.ntargets)
                if args.targetids:
                    cmd += ' --targetids {}'.format(args.targetids)
                print(cmd)
                if args.nolog:
                    err = subprocess.call(cmd.split())
                else:
                    logfile = fastfile.replace('.fits', '.log').replace('.gz', '')
                    with open(logfile, 'w') as mylog:
                        err = subprocess.call(cmd.split(), stdout=mylog, stderr=mylog)
            else:
                print(f'Output file {fastfile} exists and --overwrite not set.')

if __name__ == '__main__':
    main()
