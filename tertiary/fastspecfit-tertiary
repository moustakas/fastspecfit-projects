#!/usr/bin/env python
"""
Fit the DESI-II Tertiary tiles / observations--
  https://data.desi.lbl.gov/desi/users/raichoor/tertiary-status/tertiary-status.html

--Tertiary 1 - 
--Tertiary 7 - 
--Tertiary 8 - 
--Tertiary 23 - COSMOS - 4+1
--Tertiary 26 - COSMOS - LBG/LAE/ELG

time $HOME/code/desihub/fastspecfit-projects/tertiary/fastspecfit-tertiary --mp 128 --tertiary 1
time $HOME/code/desihub/fastspecfit-projects/tertiary/fastspecfit-tertiary --mp 128 --tertiary 1 --merge

time $HOME/code/desihub/fastspecfit-projects/tertiary/fastspecfit-tertiary --mp 128 --tertiary 1 --fitsky
time $HOME/code/desihub/fastspecfit-projects/tertiary/fastspecfit-tertiary --mp 128 --tertiary 1 --fitsky --merge


"""
import pdb # for debugging

import os, time, subprocess
from glob import glob
import numpy as np
import fitsio
from astropy.table import Table, vstack

from desispec.parallel import stdouterr_redirected
from desimodel.footprint import radec2pix

from fastspecfit.io import ZWarningMask

from desiutil.log import get_logger
log = get_logger()

def main():
    """Main wrapper

    """
    import argparse    
    from importlib import resources

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--tertiary', type=str, choices=['1', '7', '8', '23', '26'], help='Tertiary program to model.')
    parser.add_argument('--mp', type=int, default=1, help='Number of multiprocessing processes per MPI rank or node.')
    parser.add_argument('-n', '--ntargets', type=int, help='Number of targets to process in each file.')
    parser.add_argument('--outdir', type=str, default=None, help='Output directory.')
    parser.add_argument('--targetids', type=str, default=None, help='Comma-separated list of TARGETIDs to process.')
    parser.add_argument('--fastphot', action='store_true', help='Fit just the broadband photometry.')
    parser.add_argument('--vi-redshifts', action='store_true', help='Refit at the VI redshifts.')
    parser.add_argument('--overwrite', action='store_true', help='Overwrite existing files.')
    parser.add_argument('--nolog', action='store_true', help='Do not write a log (useful for debugging).')
    parser.add_argument('--redrock', action='store_true', help='Run Redrock.')
    parser.add_argument('--fitsky', action='store_true', help='Fit sky targets.')
    parser.add_argument('--merge', action='store_true', help='Merge all individual catalogs into one large file.')
    parser.add_argument('--makeqa', action='store_true', help='Build QA in parallel.')
    parser.add_argument('--makehtml', action='store_true', help='Build the HTML page.')
    args = parser.parse_args()

    #from desispec.io.meta import get_desi_root_readonly
    #desi_root = get_desi_root_readonly()
    desi_root = os.getenv('DESI_ROOT')
    
    if args.outdir is None:
        args.outdir = os.path.join(desi_root, 'users', 'ioannis', 'tertiary')
        
    tertiary = f'tertiary{args.tertiary}'

    redux_version = {
        '1': 'v02132024',
        '7': 'v02132024',
        '8': 'v02132024',
        '23': 'v02132024',
        '26': 'v02132024',
        }

    datadir = os.path.join(desi_root, 'users', 'jratajcz', f'{tertiary}-{redux_version[args.tertiary]}', 'healpix')
    #mergefile = os.path.join(datadir, f'merge-{tertiary}-{redux_version[args.tertiary]}.fits')
    
    #maxphotwave = 35. # [micron]
    #fphotodirs = {
    #    '15': desi_root+'/external/legacysurvey/dr9',
    #    '18': args.outdir+'/phot/desi-odin.fits[PHOTINFO]',
    #    '23': desi_root+'/external/legacysurvey/dr9',
    #    '26': args.outdir+'/phot/desi-suprime.fits[PHOTINFO]',
    #    '34': desi_root+'/external/legacysurvey/dr10',
    #    '35': desi_root+'/external/legacysurvey/dr10',
    #    }
    #fphotofiles = {
    #    '15': resources.files('fastspecfit').joinpath('data/legacysurvey-dr9.yaml'),
    #    '18': args.outdir+'/phot/odin-photoinfo.yaml',
    #    '23': resources.files('fastspecfit').joinpath('data/legacysurvey-dr9.yaml'),
    #    '26': args.outdir+'/phot/suprime-photoinfo.yaml',
    #    '34': resources.files('fastspecfit').joinpath('data/legacysurvey-dr10.yaml'),
    #    '35': resources.files('fastspecfit').joinpath('data/legacysurvey-dr10.yaml'),
    #    }
    #datadir = datadirs[args.tertiary]
    #fphotodir = fphotodirs[args.tertiary]
    #fphotofile = fphotofiles[args.tertiary]

    if args.fastphot:
        prefix = 'fastphot-'
        fits = 'fits'
        extname = 'fastphot'
    else:
        if args.fitsky:
            prefix = 'fastspec-sky-'
        else:
            prefix = 'fastspec-'
        fits = 'fits.gz'
        extname = 'fastspec'
    outdir = os.path.join(args.outdir, tertiary, extname)

    if not os.path.isdir(outdir):
        os.makedirs(outdir, exist_ok=True)

    if args.vi_redshifts:
        # Fit at the VI redshifts (only for Tertiary 18 or Tertiary 26).
        if args.merge:
            from fastspecfit.mpi import _domerge
            mergefile = os.path.join(args.outdir, tertiary, f'{prefix}vi-{tertiary}.fits')
            if not os.path.isfile(mergefile) or args.overwrite:
                fastfiles = glob(os.path.join(args.outdir, tertiary, f'{prefix}vi', f'{prefix}vi-?????.fits*'))
                _domerge(fastfiles, extname=fcmd.upper(), mergefile=mergefile,
                         fastphot=args.fastphot, mp=args.mp)
            else:
                log.info(f'Output file {mergefile} exists; use --overwrite to, well, overwrite.')
        elif args.makeqa:
            qadir = os.path.join(args.outdir, tertiary, f'{prefix}vi', 'qa')
            if not os.path.isdir(qadir):
                os.makedirs(qadir, exist_ok=True)
            fastfiles = glob(os.path.join(args.outdir, tertiary, f'{prefix}vi', f'{prefix}vi-?????.fits*'))
            for fastfile in fastfiles:#[0:1]:
                healpix = os.path.basename(fastfile).split('-')[2].split('.')[0]
                redrockfile = os.path.join(datadir, f'redrock-{healpix}.fits')
                cmd = f'fastspecfit-qa {fastfile} -o {qadir} --redrockfiles {redrockfile} --mp {args.mp} '
                cmd += f'--fphotodir {fphotodir} --fphotofile {fphotofile} --maxphotwave {maxphotwave} '
                cmd += f'--emline_snrmin 1.0 --nsmoothspec 2'
                if args.ntargets:
                    cmd += ' --ntargets {}'.format(args.ntargets)
                if args.overwrite:
                    cmd += ' --overwrite'
                #log.info('HACK!!!')
                #cmd += ' --targetids 39089837499745334'
                log.info(cmd)
                err = subprocess.call(cmd.split())
        elif args.makehtml:
            raise NotImplementedError
        else:
            raise NotImplementedError            
            # Fit!
            if args.tertiary == '18':
                vifile = os.path.join(args.outdir, tertiary, 'WIRO_LAE_targets.csv')
                vi = Table.read(vifile)
                [vi.rename_column(col, col.upper()) for col in vi.colnames]
                vi.rename_column('VI_REDSHIFT', 'VI_Z')
            elif args.tertiary == '26':
                vifile = os.path.join(args.outdir, tertiary, 'VI_dey_Subaru.fits.gz')
                vi = Table(fitsio.read(vifile))
                # trim
                #iqso = ['qso' in comment.lower() or 'agn' in comment.lower() for comment in vi['VI_COMMENT']]
                #I = np.logical_not(iqso) * (vi['VI_QUALITY'] >=3) * (vi['VI_Z'] > 2.4) * (vi['VI_Z'] < 3.5)
                I = (vi['VI_QUALITY'] >=3) * (vi['TERTIARY_TARGET'] == 'LAE_SUBARU ') * (vi['VI_Z'] > 2.4)#1e-3)
                log.info('Trimming to {} high-quality VI redshifts.'.format(np.sum(I)))
                vi = vi[I]
                vi.rename_column('VI_TARGETID', 'TARGETID')
    
            log.info('Read {} objects from {}'.format(len(vi), vifile))
            mm = Table(fitsio.read(os.path.join(datadir, 'merge-{}.fits'.format(os.path.basename(datadir)))))
            mm['HEALPIX'] = radec2pix(64, mm['TARGET_RA'], mm['TARGET_DEC'])
            
            I = np.hstack([np.where(mm['TARGETID'] == tid)[0] for tid in vi['TARGETID']])
            mm = mm[I]
            I = np.hstack([np.where(vi['TARGETID'] == tid)[0] for tid in mm['TARGETID']])
            vi = vi[I]
            assert(np.all(mm['TARGETID'] == vi['TARGETID']))
            #log.info(mm)
            #log.info(vi)

            #log.info('HACK! - just 1 healpix!')
            #for healpix in [27245]:#set(mm['HEALPIX']):#[:1]):
            for healpix in sorted(set(mm['HEALPIX'])):
                I = healpix == mm['HEALPIX']

                targetids = ','.join(mm['TARGETID'][I].astype(str))
                input_redshifts = ','.join(vi['VI_Z'][I].astype(str))
                redrockfile = os.path.join(datadir, f'redrock-{healpix}.fits')
                outfile = os.path.join(args.outdir, tertiary, f'{prefix}vi', f'{prefix}vi-{healpix}.{fits}')

                #targetids = '39089837499745334'

                cmd = f'fastspec {redrockfile} -o={outfile} --targetids={targetids} --input-redshifts={input_redshifts} '
                cmd += f'--mp={args.mp} --fphotodir={fphotodir} --fphotofile={fphotofile} '
                if args.ntargets:
                    cmd += f' --ntargets={args.ntargets}'
                if args.targetids:
                    cmd += f' --targetids {args.targetids}'
                if args.tertiary == '26':
                    cmd += ' --no-smooth-continuum --constrain-age'
                log.info(cmd)
                err = subprocess.call(cmd.split())
    elif args.merge:
        from fastspecfit.mpi import _domerge
        mergefile = os.path.join(args.outdir, tertiary, f'{prefix}{tertiary}.fits')
        if not os.path.isfile(mergefile) or args.overwrite:
            fastfiles = glob(os.path.join(outdir, f'{prefix}?????.fits*'))
            _domerge(fastfiles, extname=extname.upper(), mergefile=mergefile,
                     fastphot=args.fastphot, mp=args.mp)
        else:
            log.info(f'Output file {mergefile} exists; use --overwrite to, well, overwrite.')
    elif args.makeqa:
        qadir = os.path.join(args.outdir, tertiary, f'{fcmd}', 'qa')
        if not os.path.isdir(qadir):
            os.makedirs(qadir, exist_ok=True)
        fastfiles = glob(os.path.join(args.outdir, tertiary, f'{fcmd}', f'{prefix}?????.fits*'))
        for fastfile in fastfiles:
            healpix = os.path.basename(fastfile).split('-')[1].split('.')[0]
            redrockfile = os.path.join(datadir, f'redrock-{healpix}.fits')
            cmd = f'fastspecfit-qa {fastfile} -o {qadir} --redrockfiles {redrockfile} --mp {args.mp} '
            cmd += f'--fphotodir {fphotodir} --fphotofile {fphotofile} --maxphotwave {maxphotwave}'
            if args.ntargets:
                cmd += f' --ntargets {args.ntargets}'
            if args.overwrite:
                cmd += ' --overwrite'
            log.info(cmd)
            err = subprocess.call(cmd.split())
    elif args.redrock:
        raise NotImplementedError        
        outdir = os.path.join(args.outdir, tertiary)
        #log.info('Hack -- just refitting a small subset of objects!')
        #mergefile = os.path.join(outdir, 'fastspec-vi-tertiary26.fits')
        #mm = Table(fitsio.read(mergefile, 'METADATA'))
        mergefile = os.path.join(outdir, 'VI_dey_Subaru.fits.gz')
        mm = Table(fitsio.read(mergefile))
        mm.rename_column('VI_TARGETID', 'TARGETID')
        mm['HEALPIX'] = radec2pix(64, mm['RA'], mm['DEC'])        

        for healpix in sorted(set(mm['HEALPIX'])):
            I = mm['HEALPIX'] == healpix
            targetids = ','.join(mm['TARGETID'][I].astype(str))

            coaddfile = os.path.join(datadir, f'coadd-{healpix}.fits')
            redrockfile = os.path.join(outdir, f'redrock-nmf-{healpix}.fits')

            cmd = f'rrdesi -i={coaddfile} -o={redrockfile} --targetids={targetids} --mp={args.mp}'
            log.info(cmd)
            err = subprocess.call(cmd.split())            
    elif args.makehtml:
        raise NotImplementedError
    else:
        # fit!
        #redrockfiles = glob(os.path.join(datadir, 'redrock-27333.fits'))
        redrockfiles = glob(os.path.join(datadir, 'redrock-?????.fits'))
        for redrockfile in redrockfiles:
            if args.fitsky:
                fm = Table(fitsio.read(redrockfile, 'FIBERMAP', columns=['OBJTYPE', 'TARGETID']))
                zb = Table(fitsio.read(redrockfile, 'REDSHIFTS', columns=['Z', 'ZWARN']))
                I = (fm['OBJTYPE'] == 'SKY') * (zb['Z'] > 1e-3) * (zb['ZWARN'] & ZWarningMask.NODATA == 0)
                targetids = ','.join(np.unique(fm['TARGETID'][I]).astype(str))
            else:
                targetids = args.targetids
                
            fastfile = os.path.join(outdir, os.path.basename(redrockfile).replace('redrock-', prefix))
            if not args.fastphot:
                fastfile += '.gz'
            if not os.path.isfile(fastfile) or args.overwrite:
                cmdargs = f'{redrockfile} -o={fastfile} --mp={args.mp} '#--fphotodir={fphotodir} --fphotofile={fphotofile}'
                if args.fitsky:
                    cmdargs += f' --ignore-photometry'
                if args.ntargets:
                    cmdargs += f' --ntargets={args.ntargets}'
                if targetids:
                    cmdargs += f' --targetids={targetids}'
                if args.fastphot:
                    from fastspecfit.fastspecfit import fastphot as fast
                    log.info(f'fastphot {cmdargs}')
                else:
                    from fastspecfit.fastspecfit import fastspec as fast
                    log.info(f'fastspec {cmdargs}')
                if args.nolog:
                    fast(args=cmdargs.split())
                else:
                    logfile = fastfile.replace('.fits', '.log').replace('.gz', '')
                    with stdouterr_redirected(to=logfile, overwrite=True):
                        fast(args=cmdargs.split())
            else:
                log.info(f'Output file {fastfile} exists and --overwrite not set.')

if __name__ == '__main__':
    main()
