#!/usr/bin/env python
"""De-redshifting code.

fastspecfit-deredshift --fastspecfile ./fastspect.fits

fastspecfit-deredshift --fastphotfile /global/cfs/cdirs/desi/spectro/fastspecfit/denali/tiles/merged/fastphot-denali-cumulative.fits \
  --fastspecfile /global/cfs/cdirs/desi/spectro/fastspecfit/denali/tiles/merged/fastspec-denali-cumulative.fits

"""
import pdb # for debugging
import os, sys, time
import numpy as np

from fastspecfit.util import C_LIGHT

#from redrock.rebin import trapz_rebin
from desispec.interpolation import resample_flux
from desiutil.log import get_logger
log = get_logger()

def _deredshift_one(args):
    """Multiprocessing wrapper."""
    return deredshift_one(*args)

def deredshift_one(coaddwave, coaddflux, coaddivar, restwave, Iwave):
    """QA on one spectrum."""
    resampflux = np.zeros_like(restwave)
    resampivar = np.zeros_like(restwave)
    if len(Iwave) > 0:
        #resampflux[Iwave] = trapz_rebin(coaddwave, coaddflux, restwave[Iwave])
        flux, ivar = resample_flux(restwave[Iwave], coaddwave, coaddflux, ivar=coaddivar)
        resampflux[Iwave] = flux
        resampivar[Iwave] = ivar
    return resampflux, resampivar

def write_deredshifted(wave, flux, ivar, fastspec, fastphot, metadata,
                       outfile, specprod, coadd_type):
    """Write out.

    """
    from astropy.io import fits
    
    t0 = time.time()

    hduflux = fits.PrimaryHDU(flux.astype('f4'))
    hduflux.header['EXTNAME'] = 'FLUX'

    hduivar = fits.ImageHDU(ivar.astype('f4'))
    hduivar.header['EXTNAME'] = 'IVAR'

    hduwave = fits.ImageHDU(wave.astype('f8'))
    hduwave.header['EXTNAME'] = 'WAVE'
    hduwave.header['BUNIT'] = 'Angstrom'
    hduwave.header['AIRORVAC'] = ('vac', 'vacuum wavelengths')

    hduspec = fits.convenience.table_to_hdu(fastspec)
    hduspec.header['EXTNAME'] = 'FASTSPEC'

    hduphot = fits.convenience.table_to_hdu(fastphot)
    hduphot.header['EXTNAME'] = 'FASTPHOT'

    hdumeta = fits.convenience.table_to_hdu(metadata)
    hdumeta.header['EXTNAME'] = 'METADATA'
    hdumeta.header['SPECPROD'] = (specprod, 'spectroscopic production name')
    hdumeta.header['COADDTYP'] = (coadd_type, 'spectral coadd fitted')

    hx = fits.HDUList([hduflux, hduivar, hduwave, hduspec, hduphot, hdumeta])
    hx.writeto(outfile, overwrite=True, checksum=True)
    print('Writing {} spectra to {} took {:.2f} sec'.format(
        len(fastphot), outfile, time.time()-t0))

def parse(options=None):
    """Parse input arguments.

    """
    import sys, argparse

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--specprod', type=str, default='denali', choices=['denali', 'cascades', 'daily'],
                        help='Spectroscopic production to process.')
    parser.add_argument('--coadd-type', type=str, default='cumulative', choices=['cumulative', 'pernight', 'perexp'],
                        help='Type of spectral coadds corresponding to the input zbestfiles.')
    parser.add_argument('--tile', default=None, type=str, nargs='*', help='Tile(s) to process.')
    parser.add_argument('--night', default=None, type=str, nargs='*', help='Night(s) to process (ignored if coadd-type is cumulative).')
    
    parser.add_argument('--targetids', type=str, default=None, help='Comma-separated list of target IDs to process.')
    parser.add_argument('-n', '--ntargets', type=int, help='Number of targets to process in each file.')
    parser.add_argument('--firsttarget', type=int, default=0, help='Index of first object to to process in each file (0-indexed).')
    parser.add_argument('--mp', type=int, default=1, help='Number of multiprocessing processes per MPI rank or node.')

    parser.add_argument('-o', '--outdir', default=None, type=str, help='Full path to desired output directory.')

    parser.add_argument('--fastphotfile', default=None, type=str, help='Full path to fastphot fitting results.')
    parser.add_argument('--fastspecfile', default=None, type=str, help='Full path to fastphot fitting results.')

    parser.add_argument('--overwrite', action='store_true', help='Overwrite any existing output files.')
    
    if options is None:
        args = parser.parse_args()
        log.info(' '.join(sys.argv))
    else:
        args = parser.parse_args(options)
        log.info('fastspecfit-html {}'.format(' '.join(options)))

    return args

def main(args=None, comm=None):
    """Deredshift the spectra by target class.

    """
    from astropy.table import Table
    from fastspecfit.continuum import ContinuumFit
    from fastspecfit.emlines import EMLineFit
    from fastspecfit.io import DESISpectra, read_fastspecfit
    
    if isinstance(args, (list, tuple, type(None))):
        args = parse(args)

    # Read the fitting results and get all the unique targetids.
    if (args.fastphotfile is None or args.fastspecfile is None):
        log.warning('Must provide both --fastphotfile or --fastspecfile.')
        return
    
    fastspec, metadata, specprod, coadd_type = read_fastspecfit(args.fastspecfile)
    fastphot, metaphot, _specprod, _coadd_type = read_fastspecfit(args.fastphotfile, fastphot=True)
    if (specprod != _specprod) or (coadd_type != _coadd_type):
        log.warning('Mis-matching specprod or coadd_type in fastspec vs fastphot fitting results!')
        return
    assert(np.all(fastspec['TARGETID'] == fastphot['TARGETID']))
    assert(np.all(fastspec['TARGETID'] == metaphot['TARGETID']))
    assert(np.all(metadata['TILEID'] == metaphot['TILEID']))

    #from astropy.table import join
    ## temporarily add TILEID to the tables so we can use it to join,
    ## together with TARGETID and, optionally, NIGHT.
    #joinkeys = ['TARGETID', 'TILEID']
    #if 'NIGHT' in fastspec.colnames:
    #    joinkeys += 'NIGHT'
    #fastspec['TILEID'] = metaspec['TILEID']
    #fastphot['TILEID'] = metaphot['TILEID']
    #
    #fastfit = join(fastspec, fastphot, join_type='outer', table_names=['SPEC', 'PHOT'], keys=joinkeys)
    #metadata = join(metaspec, metaphot, join_type='outer', table_names=['SPEC', 'PHOT'], keys=joinkeys)
    #assert(np.all(fastfit['TARGETID'] == metadata['TARGETID']))
    #assert(np.all(fastfit['TILEID'] == metadata['TILEID']))

    # optionally trim to a particular tile and/or night
    def _select_tiles_nights_targets(fastfit, metadata, tiles=None, nights=None):
        if fastfit is None or metadata is None:
            return fastfit, metadata
        keep = np.ones(len(fastfit), bool)
        if tiles:
            tilekeep = np.zeros(len(fastfit), bool)
            for tile in tiles:
                tilekeep = np.logical_or(tilekeep, metadata['TILEID'].astype(str) == tile)
            keep = np.logical_and(keep, tilekeep)
            log.info('Keeping {} objects from tile(s) {}'.format(len(fastfit), ','.join(tiles)))
        if nights and 'NIGHT' in metadata:
            nightkeep = np.zeros(len(fastfit), bool)
            for night in nights:
                nightkeep = np.logical_or(nightkeep, metadata['NIGHT'].astype(str) == night)
            keep = np.logical_and(keep, nightkeep)
            log.info('Keeping {} objects from night(s) {}'.format(len(fastfit), ','.join(nights)))
        return fastfit[keep], metadata[keep]
    
    fastspec, metadata = _select_tiles_nights_targets(
        fastspec, metadata, tiles=args.tile, nights=args.night)
    fastphot, metaphot = _select_tiles_nights_targets(
        fastphot, metaphot, tiles=args.tile, nights=args.night)

    # parse the targetids optional input
    if args.targetids:
        targetids = [int(x) for x in args.targetids.split(',')]

        keep = np.where(np.isin(fastfit['TARGETID'], targetids))[0]
        if len(keep) == 0:
            log.warning('No matching targetids found!')
            return
        fastfit = fastfit[keep]
        metadata = metadata[keep]

    if args.ntargets is not None:
        keep = np.arange(args.ntargets) + args.firsttarget
        log.info('Keeping {} targets.'.format(args.ntargets))
        fastspec = fastspec[keep]
        fastphot = fastphot[keep]
        metadata = metadata[keep]

    zbestdir = os.path.join(os.getenv('DESI_SPECTRO_REDUX'), specprod, 'tiles')    
    if args.outdir is None:
        outdir = os.path.join(os.getenv('FASTSPECFIT_DATA'), specprod, 'tiles', 'deredshifted')
    else:
        outdir = args.outdir
    if not os.path.isdir(outdir):
        os.makedirs(outdir, exist_ok=True)

    # Initialize the continuum- and emission-line fitting classes.
    t0 = time.time()
    CFit = ContinuumFit()
    EMFit = EMLineFit()
    Spec = DESISpectra()
    log.info('Initializing the classes took: {:.2f} sec'.format(time.time()-t0))
    
    # read the tile info file for this production
    tilefile = os.path.join(os.getenv('DESI_SPECTRO_REDUX'), specprod, 'tiles-{}.csv'.format(specprod))
    tileinfo = Table.read(tilefile)
    tileinfo = tileinfo[np.isin(tileinfo['TILEID'], np.unique(metadata['TILEID']))]
    tileinfo = tileinfo[np.argsort(tileinfo['TILEID'])]
    log.info('Read survey info for {} tiles'.format(len(tileinfo)))

    pdb.set_trace()

    # rest-frame resampling parameters
    obswave_min, obswave_max = 3600.0, 9800.0
    zmax = {'ELG': 1.6, 'LRG': 1.3, 'QSO': 3.5, 'BGS_ANY': 0.7}

    pixkms = 20.0                            # pixel size [km/s]Traceback (most recent call last):
    dlogwave = pixkms / C_LIGHT / np.log(10) # pixel size [log-lambda]

    # For each unique tile, select targets of each class and build the
    # rest-frame spectra.
    targetclasses = ['BGS_ANY', 'ELG', 'LRG', 'QSO']#, 'MWS_ANY'

    tall = time.time()
    for tinfo in tileinfo:
        tile = tinfo['TILEID']

        if tinfo['SURVEY'].upper() == 'SV1':
            from desitarget.sv1.sv1_targetmask import desi_mask#, bgs_mask, mws_mask
            desibit = 'SV1_DESI_TARGET'
            bgsbit = 'SV1_BGS_TARGET'
            mwsbit = 'SV1_MWS_TARGET'
        elif tinfo['SURVEY'].upper() == 'SV2':
            from desitarget.sv2.sv2_targetmask import desi_mask#, bgs_mask, mws_mask
            desibit = 'SV2_DESI_TARGET'
            bgsbit = 'SV2_BGS_TARGET'
            mwsbit = 'SV2_MWS_TARGET'
        else:
            NotImplementedError
            
        for targetclass in targetclasses:

            nicetargetclass = targetclass.replace('BGS_ANY', 'BGS').lower()
            outfile = os.path.join(outdir, '{}-{}-restflux.fits'.format(nicetargetclass, tile))
            if os.path.isfile(outfile) and not args.overwrite:
                log.info('Output file {} exists; skipping.'.format(outfile))
                continue

            targintile = np.where(
                (tile == metadata['TILEID']) *
                (metadata['Z'] > 0.01) * # minimum redshift!
                #(metadata['Z_SPEC'] > 1.0) *
                #(metadata['Z_SPEC'] < 1.1) *
                metadata[desibit] & desi_mask.mask(targetclass) != 0)[0]
            
            log.info('Working on {} {}s on tile {}'.format(len(targintile), targetclass, tile))
            
            if len(targintile) == 0:
                log.info('No good {} targets in tile {}...moving on.'.format(targetclass, tile))
                continue
            #targintile = targintile[:22]

            targ_fastspec = fastspec[targintile]
            targ_fastphot = fastphot[targintile]
            targ_metadata = metadata[targintile]
            nobj = len(targ_metadata)

            # Construct the zbestfiles filenames based on the input (only
            # supports coadd_type=='cumulative').
            allpetals = targ_metadata['FIBER'].data // 500
            thrunights = targ_metadata['THRUNIGHT'].astype(str).data
            targetids = targ_metadata['TARGETID']
            assert(len(np.unique(thrunights)) == 1)

            zbestfiles = []
            for petal in set(allpetals):
                indx = np.where((petal == allpetals))[0]
                zbestfile = os.path.join(zbestdir, 'cumulative', str(tile), thrunights[indx[0]], 'zbest-{}-{}-thru{}.fits'.format(
                    petal, tile, thrunights[indx[0]]))
                zbestfiles.append(zbestfile)

            Spec.select(zbestfiles=zbestfiles, specprod=specprod,
                        coadd_type='cumulative', targetids=targetids)
            #dataphot = Spec.read_and_unpack(CFit, fastphot=True, synthphot=False)
            dataspec = Spec.read_and_unpack(CFit, fastphot=False, synthphot=False,
                                            remember_coadd=True)
            assert(len(dataspec) == nobj)

            # now resample onto a constant log-lambda binning scale
            restwave = 10**np.arange(np.log10(obswave_min / (1+zmax[targetclass])), np.log10(obswave_max), dlogwave)
            restwave_min = np.min(restwave)
            restwave_max = np.max(restwave)
            npix = len(restwave)

            pad = 2 # [angstroms]
            mpargs = []
            for iobj in np.arange(nobj):
                oneplusz = 1 + dataspec[iobj]['zredrock']
                coaddwave = dataspec[iobj]['coadd_wave'] / oneplusz
                coaddflux = dataspec[iobj]['coadd_flux'] * oneplusz
                coaddivar = dataspec[iobj]['coadd_ivar'] / oneplusz**2
                Iwave = np.where((restwave > np.min(coaddwave+pad)) * (restwave < np.max(coaddwave-pad)))[0]
                mpargs.append((coaddwave, coaddflux, coaddivar, restwave, Iwave))
                
            t0 = time.time()
            if args.mp > 1:
                import multiprocessing
                with multiprocessing.Pool(args.mp) as P:
                    res = P.map(_deredshift_one, mpargs)
            else:
                res = [deredshift_one(*_mpargs) for _mpargs in mpargs]
                
            res = list(zip(*res))
            restflux = np.vstack(res[0]).astype('f4')
            restivar = np.vstack(res[1]).astype('f4')
            log.info('De-redshifting done in {:.2f} sec'.format(time.time()-t0))

            #import matplotlib.pyplot as plt
            #plt.plot(restwave, np.sum(restflux, axis=0)) ; plt.xlim(3000, 4200) ; plt.savefig('test.png')
            #pdb.set_trace()

            write_deredshifted(restwave, restflux, restivar, targ_fastspec,
                               targ_fastphot, targ_metadata, outfile, specprod,
                               coadd_type)

    log.info('De-redshifting everything took: {:.2f} sec'.format(time.time()-tall))

if __name__ == '__main__':
    main()
    
