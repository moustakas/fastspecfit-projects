#!/usr/bin/env python
"""Build spectroscopic templates.

"""
import pdb # for debugging
import os, sys, time
import numpy as np
import fitsio
from astropy.table import Table

from desiutil.log import get_logger
log = get_logger()

templatedir = os.path.join(os.getenv('DESI_ROOT'), 'users', 'ioannis', 'desi-templates')
fastspecfitdir = os.path.join(os.getenv('DESI_ROOT'), 'spectro', 'fastspecfit')

def parse(options=None):
    """Parse input arguments.

    """
    import sys, argparse

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('targetclass', type=str, choices=['lrg', 'elg', 'bgs', 'qso'],
                        help='Target class to analyze.')
    parser.add_argument('--specprod', type=str, default='denali', choices=['denali', 'cascades', 'daily'],
                        help='Spectroscopic production to process.')

    parser.add_argument('--mp', type=int, default=1, help='Number of multiprocessing processes per MPI rank or node.')
    parser.add_argument('--minperbin', type=int, default=3, help='Minimum number of galaxies per bin.')

    parser.add_argument('--minwave', type=float, default=500.0, help='Minimum output wavelength of stacked continuum spectra.')
    parser.add_argument('--maxwave', type=float, default=6e4, help='Maximum output wavelength of stacked continuum spectra.')
    parser.add_argument('--min-efftime', type=float, default=None, help='Minimum effective time to keep a tile (min).')

    parser.add_argument('-o', '--outdir', default=None, type=str, help='Full path to desired output directory.')
    parser.add_argument('--overwrite-parent', action='store_true', help='Overwrite the parent sample.')
    parser.add_argument('--overwrite-stacks', action='store_true', help='Overwrite existing stacked spectra output files.')
    parser.add_argument('--overwrite-fastspec', action='store_true', help='Overwrite existing fastspec fitting results.')
    parser.add_argument('--overwrite-templates', action='store_true', help='Overwrite existing templates.')

    parser.add_argument('--empca', action='store_true', help='Build the emPCA-compatible templates.')
    parser.add_argument('--qa', action='store_true', help='Build QA output for a given target class.')
    
    if options is None:
        args = parser.parse_args()
        log.info(' '.join(sys.argv))
    else:
        args = parser.parse_args(options)
        log.info('desi-templates {}'.format(' '.join(options)))

    return args

def main(args=None, comm=None):
    """Wrapper for building templates.

    """
    if isinstance(args, (list, tuple, type(None))):
        args = parse(args)

    from fastspecfit.templates.sample import SAMPLE_PROPERTIES as props
    props = props[args.targetclass]

    log.info('Working on targetclass {}'.format(args.targetclass.upper()))

    tilefile = os.path.join(templatedir, '{}-tiles.fits'.format(args.targetclass))
    samplefile = os.path.join(templatedir, '{}-sample.fits'.format(args.targetclass))
    stackfile = os.path.join(templatedir, '{}-stacks.fits'.format(args.targetclass))
    fastspecfile = os.path.join(templatedir, '{}-fastspec.fits'.format(args.targetclass))
    templatefile = os.path.join(templatedir, '{}-templates.fits'.format(args.targetclass))

    # Optional build QA for every (existing) output files and return.
    if args.qa:
        from fastspecfit.templates.qa import build_all_qa
        build_all_qa(args.targetclass, templatedir, tilefile=tilefile,
                     samplefile=samplefile, stackfile=stackfile,
                     fastspecfile=fastspecfile, templatefile=templatefile,
                     specprod=args.specprod)

        return

    # [1] Build the parent sample.
    if not os.path.isfile(samplefile) or args.overwrite_parent:
        log.info('Building the parent sample.')

        from fastspecfit.templates.sample import select_tiles, read_fastspecfit, select_parent_sample

        # Read the master tile file and the fastspecfit fitting results and
        # select the parent sample.
        tilestable = select_tiles(args.targetclass, min_efftime=args.min_efftime,
                                  remove_vi=False, specprod=args.specprod,
                                  outfile=tilefile)
        
        allphot, allspec, allmeta = read_fastspecfit(
            tilestable, targetclass=args.targetclass,
            fastspecfit_dir=fastspecfitdir,
            specprod=args.specprod)
        phot, spec, meta = select_parent_sample(
            allphot, allspec, allmeta, targetclass=args.targetclass,
            specprod=args.specprod, samplefile=samplefile,
            zobj_minmax=props['zminmax'], verbose=True)

    # [2] Build the stacked spectra.
    if not os.path.isfile(stackfile) or args.overwrite_stacks:
        log.info('Building stacked spectra in bins of properties.')

        from fastspecfit.templates.templates import spectra_in_bins
        from fastspecfit.templates.sample import read_parent_sample, read_tilestable
        
        tilestable = read_tilestable(tilefile)
        phot, spec, meta = read_parent_sample(samplefile)

        # select spectra in bins of properties, looping over all tiles
        #tilestable = tilestable[tilestable['TILEID'] == 80607]
        spectra_in_bins(tilestable, targetclass=args.targetclass,
                        fastspecfit_dir=fastspecfitdir,
                        minperbin=args.minperbin, minwave=args.minwave,
                        maxwave=args.maxwave, normwave=props['normwave'], 
                        mp=args.mp, fastphot_in_bins=True, verbose=False,
                        stackfile=stackfile)

    # [3] Model the stacked spectra using fastspecfit.
    if not os.path.isfile(fastspecfile) or args.overwrite_fastspec:
        from fastspecfit.templates.templates import fastspecfit_stacks

        log.info('Modeling stacked spectra using fastspec.')

        qadir = os.path.join(templatedir, 'qa')
        fastspecfit_stacks(stackfile, mp=args.mp, fastspecfile=fastspecfile,
                           qadir=qadir, qaprefix=args.targetclass)

    # [4] Generate the final templates.
    if not os.path.isfile(templatefile) or args.overwrite_templates:
        from fastspecfit.templates.templates import build_templates

        log.info('Building final templates.')
        build_templates(fastspecfile, mp=args.mp, templatefile=templatefile,
                        minwave=args.minwave, maxwave=args.maxwave)

    # [5] Build the empca template catalog using all the target classes.
    if args.empca:
        from astropy.table import vstack
        from fastspecfit.templates.templates import read_templates, write_templates

        log.info('Building empca template set.')

        empcafile = os.path.join(templatedir, 'empca-templates.fits')

        modelwave = None
        modelflux, modeldata, weights = [], [], []

        for targetclass in ('bgs', 'lrg', 'elg'):
            templatefile = os.path.join(templatedir, '{}-templates.fits'.format(targetclass))
            
            modelwave1, modelflux1, modeldata1 = read_templates(templatefile)
            if modelwave is None:
                modelwave = modelwave1
            assert(np.all(modelwave == modelwave1))
            modelflux.append(modelflux1)
            modeldata.append(modeldata1)
            weights1 = np.zeros_like(modelflux1) + modeldata1['NOBJ'].data[:, np.newaxis]
            weights1 /= np.sum(modeldata1['NOBJ'].data)
            weights.append(weights1)

        modelflux = np.vstack(modelflux)
        weights = np.vstack(weights)
        modeldata = vstack(modeldata)

        write_templates(empcafile, modelwave, modelflux, modeldata,
                        weights=weights, empca=True)

        pdb.set_trace()

if __name__ == '__main__':
    main()
    
